class BusinessCustomer:
def __init__(self, acct_id, money_owed):
self.acct_id = acct_id
self.money_owed = money_owed
def update(self):
if self.money_owed > 0:
print(f"{self.acct_id}: Call the company's finance department")
else:
print(f"{self.acct_id}: Corporate balance paid")
class ConsumerCustomer:
def __init__(self, acct_id, money_owed):
self.acct_id = acct_id
self.money_owed = money_owed
def update(self):
if self.money_owed > 0:
print(f"{self.acct_id}: Send a polite reminder email")
else:
print(f"{self.acct_id}: Individual balance paid")
class AccountingSystem:
def __init__(self):
self.customers = set()
def register(self, customer):
self.customers.add(customer)
def u	nregister(self, customer):
self.customers.remove(customer)
def notify(self):
for customer in self.customerscustomers:
customer.update()
def main():
# create a mix of business & consumer customers with varying balances (account ID & balances. positive means they owe the company money)
cust1 = BusinessCustomer("ACCT100", 10)
cust2 = BusinessCustomer("ACCT200", 0)
cust3 = ConsumerCustomer("ACCT300", -10)
cust4 = ConsumerCustomer("ACCT400", 20)
# Create the account system (subject) and register our new customers
accounting_sys = AccountingSystem()
accounting_sys.register(cust1)
accounting_sys.register(cust2)
accounting_sys.register(cust3)
accounting_sys.register(cust4)
# Some event occured; notify all subscribers about their bills
accounting_sys.notify()
# One customer has cancelled their account; unregister them
accounting_sys.unregister(cust2)
# Event occurred again, and notice how cust2 isn't displayed
accounting_sys.notify()
if __name__ == "__main__":
main()
